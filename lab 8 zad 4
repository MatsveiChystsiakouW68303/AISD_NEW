def structura(graph, start):
    distances = {vertex: float('inf') for vertex in graph}
    distances[start] = 0

    previous = {vertex: None for vertex in graph}

    unvisited = set(graph.keys())

    while unvisited:
        current_vertex = min(unvisited, key=lambda vertex: distances[vertex])

        unvisited.remove(current_vertex)

        for neighbor, weight in graph[current_vertex].items():
            distance = distances[current_vertex] + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous[neighbor] = current_vertex

    return distances, previous

def shortest(graph, start, end):
    distances, previous = structura(graph, start)
    path = []
    current_vertex = end

    while current_vertex is not None:
        path.append(current_vertex)
        current_vertex = previous[current_vertex]

    path.reverse()
    return path

graph = {
    'A': {'B': 4, 'C': 2},
    'B': {'A': 3, 'C': 3, 'D': 3},
    'C': {'A':5, 'B': 3, 'D': 4},
    'D': {'B': 2, 'C': 2, 'E': 4},
    'E': {'D': 1}
}

start_vertex = 'A'
end_vertex = 'E'

distances, previous = structura(graph, start_vertex)
shortest = shortest(graph, start_vertex, end_vertex)

print("Najkrótsze odległości:", distances)
print("Najkrótsza ścieżka:", shortest)
